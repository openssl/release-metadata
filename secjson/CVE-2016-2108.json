{
    "containers": {
        "cna": {
            "affected": [
                {
                    "defaultStatus": "unaffected",
                    "product": "OpenSSL",
                    "vendor": "OpenSSL",
                    "versions": [
                        {
                            "lessThan": "1.0.1o",
                            "status": "affected",
                            "version": "1.0.1",
                            "versionType": "custom"
                        },
                        {
                            "lessThan": "1.0.2c",
                            "status": "affected",
                            "version": "1.0.2",
                            "versionType": "custom"
                        }
                    ]
                }
            ],
            "credits": [
                {
                    "lang": "en",
                    "type": "finder",
                    "value": "Huzaifa Sidhpurwala (Red Hat), Hanno B\u00f6ck, David Benjamin (Google)"
                }
            ],
            "datePublic": "2016-05-03T00:00:00Z",
            "descriptions": [
                {
                    "lang": "en",
                    "value": "This issue affected versions of OpenSSL prior to April 2015. The bug causing the vulnerability was fixed on April 18th 2015, and released as part of the June 11th 2015 security releases. The security impact of the bug was not known at the time. In previous versions of OpenSSL, ASN.1 encoding the value zero represented as a negative integer can cause a buffer underflow with an out-of-bounds write in i2c_ASN1_INTEGER. The ASN.1 parser does not normally create \"negative zeroes\" when parsing ASN.1 input, and therefore, an attacker cannot trigger this bug. However, a second, independent bug revealed that the ASN.1 parser (specifically, d2i_ASN1_TYPE) can misinterpret a large universal tag as a negative zero value. Large universal tags are not present in any common ASN.1 structures (such as X509) but are accepted as part of ANY structures. Therefore, if an application deserializes untrusted ASN.1 structures containing an ANY field, and later reserializes them, an attacker may be able to trigger an out-of-bounds write. This has been shown to cause memory corruption that is potentially exploitable with some malloc implementations. Applications that parse and re-encode X509 certificates are known to be vulnerable. Applications that verify RSA signatures on X509 certificates may also be vulnerable; however, only certificates with valid signatures trigger ASN.1 re-encoding and hence the bug. Specifically, since OpenSSL's default TLS X509 chain verification code verifies the certificate chain from root to leaf, TLS handshakes could only be targeted with valid certificates issued by trusted Certification Authorities."
                }
            ],
            "metrics": [
                {
                    "format": "other",
                    "other": {
                        "content": {
                            "text": "High"
                        },
                        "type": "https://www.openssl.org/policies/secpolicy.html#high"
                    }
                }
            ],
            "providerMetadata": {
                "orgId": "b3476cb9-2e3d-41a6-98d0-0f47421a65b6",
                "shortName": "openssl"
            },
            "references": [
                {
                    "name": "OpenSSL Advisory",
                    "tags": [
                        "vendor-advisory"
                    ],
                    "url": "https://www.openssl.org/news/secadv/20160503.txt"
                }
            ],
            "x_generator": {
                "importer": "vulnxml2json5.py 2022-11-04 07:19:07.047678"
            }
        }
    },
    "cveMetadata": {
        "assignerOrgId": "b3476cb9-2e3d-41a6-98d0-0f47421a65b6",
        "cveId": "CVE-2016-2108",
        "state": "PUBLISHED"
    },
    "dataType": "CVE_RECORD",
    "dataVersion": "5.0"
}